---
import Highlight from '@/components/ui/Highlight.tsx';

const currentPath = Astro.url.pathname;

const navItems = [
  { path: '/journal', label: 'Journal', color: '#4CAF50' },
  { path: '/gallery', label: 'Gallery', color: '#FF9800' },
  { path: '/content', label: 'Content', color: '#9C27B0' },
];

const OPACITY = 0.3;
---

<header class="sticky top-0 z-40 border-b border-gray-200 bg-white/80 px-4 py-2 backdrop-blur-md">
  <div class="relative flex items-center justify-between">
    <Highlight
      href="/"
      before={currentPath === '/' ? { bgColor: '#2196F3', bgOpacity: OPACITY } : {}}
      after={{ bgColor: '#2196F3', bgOpacity: OPACITY }}>
      Sharqawy
    </Highlight>

    <!-- Desktop Navigation -->
    <nav class="hidden items-center gap-8 sm:flex">
      {
        navItems.map(({ path, label, color }) => {
          const isActive = currentPath === path;
          return (
            <Highlight
              href={path}
              before={isActive ? { bgColor: color, bgOpacity: OPACITY } : {}}
              after={{ bgColor: color, bgOpacity: OPACITY }}>
              {label}
            </Highlight>
          );
        })
      }
    </nav>

    <!-- Mobile Menu Toggle -->
    <button id="mobile-menu-toggle" class="relative z-50 sm:hidden" aria-label="Toggle mobile menu">
      <div class="relative h-5 w-6">
        <span class="hamburger-line absolute top-1"></span>
        <span class="hamburger-line absolute top-2.5"></span>
        <span class="hamburger-line absolute top-4"></span>
      </div>
    </button>
  </div>

  <!-- Mobile Navigation Dropdown -->
  <nav
    id="mobile-nav"
    class="invisible absolute inset-x-0 top-full z-50 flex w-full origin-top scale-95 transform flex-col items-start justify-start gap-2 rounded-lg border border-gray-200 bg-white/95 px-4 py-6 opacity-0 shadow-lg backdrop-blur-xl transition-all duration-200">
    {
      navItems.map(({ path, label }) => {
        const isActive = currentPath === path;
        return (
          <a
            href={path}
            class={`w-full rounded-lg px-4 py-3 text-left text-lg font-medium transition-colors duration-200 ${
              isActive ? 'bg-gray-100 text-gray-900' : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'
            }`}>
            {label}
          </a>
        );
      })
    }
  </nav>
</header>

<!-- Mobile Menu Backdrop -->
<div
  id="mobile-backdrop"
  class="pointer-events-none invisible fixed inset-0 z-30 bg-black/20 opacity-0 backdrop-blur-sm transition-all duration-200">
</div>

<style is:global>
  .hamburger-line {
    display: block;
    position: absolute;
    transition: all 0.3s ease-in-out;
    border-radius: 2px;
    background-color: #1f2937;
    width: 100%;
    height: 2px;
  }

  /* Hamburger to X animation */
  .menu-open .hamburger-line:nth-child(1) {
    top: 10px !important;
    transform: rotate(45deg);
  }

  .menu-open .hamburger-line:nth-child(2) {
    opacity: 0;
  }

  .menu-open .hamburger-line:nth-child(3) {
    top: 10px !important;
    transform: rotate(-45deg);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggleButton = document.getElementById('mobile-menu-toggle');
    const nav = document.getElementById('mobile-nav');
    const backdrop = document.getElementById('mobile-backdrop');

    if (!toggleButton || !nav || !backdrop) return;

    let isMenuOpen = false;

    function openMenu() {
      isMenuOpen = true;
      toggleButton!.classList.add('menu-open');
      nav!.classList.remove('scale-95', 'opacity-0', 'invisible');
      nav!.classList.add('scale-100', 'opacity-100', 'visible');
      backdrop!.classList.remove('opacity-0', 'invisible', 'pointer-events-none');
      backdrop!.classList.add('opacity-100', 'visible', 'pointer-events-auto');
    }

    function closeMenu() {
      isMenuOpen = false;
      toggleButton!.classList.remove('menu-open');
      nav!.classList.add('scale-95', 'opacity-0', 'invisible');
      nav!.classList.remove('scale-100', 'opacity-100', 'visible');
      backdrop!.classList.add('opacity-0', 'invisible', 'pointer-events-none');
      backdrop!.classList.remove('opacity-100', 'visible', 'pointer-events-auto');
    }

    // Toggle menu on button click
    toggleButton.addEventListener('click', e => {
      e.preventDefault();
      e.stopPropagation();
      if (isMenuOpen) {
        closeMenu();
      } else {
        openMenu();
      }
    });

    // Close menu when clicking outside
    document.addEventListener('click', e => {
      const target = e.target as HTMLElement;
      if (isMenuOpen && !nav.contains(target) && !toggleButton.contains(target)) {
        closeMenu();
      }
    });

    // Close menu when clicking backdrop
    backdrop.addEventListener('click', closeMenu);

    // Close menu when clicking nav links
    nav.addEventListener('click', e => {
      const target = e.target as HTMLElement;
      if (target && target.closest('a')) {
        closeMenu();
      }
    });

    // Close menu on escape key
    document.addEventListener('keydown', e => {
      if (e.key === 'Escape' && isMenuOpen) {
        closeMenu();
      }
    });
  });
</script>
